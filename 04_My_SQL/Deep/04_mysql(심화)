use sqldb;
CREATE TABLE stdtbl(
stdName varchar(10) not null primary key,
addr 	char(4)		not null
);

create table clubtbl  (
clubName varchar(10) not null primary key,
roomNo	 char(4)	 not null
);

create table stdclubtbl (
num			int		auto_increment		not null	primary key,
stdName		varchar(10)					not null,
clubName	varchar(10)					not null,
Foreign key(stdName) References stdtbl(stdName),
Foreign key(clubName) references clubtbl(clubName)
);

INSERT INTO stdtbl VALUES 
  ('김범수','경남'), 
  ('성시경','서울'), 
  ('조용필','경기'), 
  ('은지원','경북'), 
  ('바비킴','서울');

INSERT INTO clubtbl VALUES 
  ('수영','101호'), 
  ('바둑','102호'), 
  ('축구','103호'), 
  ('봉사','104호');

INSERT INTO stdclubtbl VALUES 
  (NULL, '김범수','바둑'), 
  (NULL,'김범수','축구'), 
  (NULL,'조용필','축구'),
  (NULL,'은지원','축구'), 
  (NULL,'은지원','봉사'), 
  (NULL,'바비킴','봉사');

-- 1번 앞에서 정의한 3개의 테이블을 이용해서 다음을 처리하세요.
--  ○ 학생테이블, 동아리테이블, 학생 동아리 테이블을 이용해서 학생을 기준으로 학생 이름/지역/가입한동아리/ 동아리방을 출력하세요.
-- select * from stdtbl stdname, addr
-- inner join on clubtbl clubName roomNo
-- inner join on stdclubtbl clubName;
select s.stdName, s.addr, c.clubName, C.roomNo --
from stdtbl S				
inner join stdclubtbl SC 		
ON S.stdName = SC.stdName	
inner join clubtbl C
ON C.clubName = SC.clubName
order by S.stdName;			-- order by : 정렬 stdName을 오름차순(asc로) order by stdName DESC(내림차순)

-- 1-2번 ○ 동아리를 기준으로 가입한 학생의 목록을 출력하세요. 출력정보: clubName, roomNo, stdName, addr
select C.clubName, C.roomNo, S.stdName, S.addr
from clubtbl C
inner join stdclubtbl SC
on C.clubName = SC.clubName
inner join stdtbl S
on S.stdName = SC.stdName
order by C.clubName;

-- ---------------------------------------------------------------------------------
USE sqldb;

CREATE TABLE empTbl(
  emp CHAR(3), 
  manager CHAR(3), 
  empTel VARCHAR(8)
);

INSERT INTO empTbl VALUES('나사장', NULL, '0000');
INSERT INTO empTbl VALUES('김재무', '나사장', '2222');
INSERT INTO empTbl VALUES('김부장', '김재무', '2222-1');
INSERT INTO empTbl VALUES('이부장', '김재무', '2222-2');
INSERT INTO empTbl VALUES('우대리', '이부장', '2222-2-1');
INSERT INTO empTbl VALUES('지사원', '이부장', '2222-2-2');
INSERT INTO empTbl VALUES('이영업', '나사장', '1111');
INSERT INTO empTbl VALUES('한과장', '이영업', '1111-1');
INSERT INTO empTbl VALUES('최정보', '나사장', '3333');
INSERT INTO empTbl VALUES('윤차장', '최정보', '3333-1');
INSERT INTO empTbl VALUES('이주임', '윤차장', '3333-1-1');

-- 2번 앞에서 추가한 테이블에서 '우대리'의 상관 연락처 정보를 확인하세요
-- 출력할 정보 / 부하직원, 직속상관, 직속상관 연락처
select
emp as '부하직원', manager as '직속상관', empTel as '직속상관 연락처'
from emptbl
where emp = '우대리';
-- 우대리 출력해서 직속상관 누군지 확인 --> 이부장

SELECT
A.emp AS '부하직원', 
B.emp AS '직속상관', 
B.empTel AS '직속상관연락처'
 FROM empTbl A
 INNER JOIN empTbl B
 ON A.manager = B.emp
 WHERE A.emp = '우대리';
 -- a에서는 직원 / 전화번호는 b에서 
 -- so, a.emp했지만, 전화번호는 b에서 호출 됨.
 
 
 -- 모든 문제는employees 데이터베이스에서 수행한다.  
-- 3번 현재 재직중인 직원의 정보를 출력하세요
 -- 출력항목: emp_no, first_name, last_name, title
 use employees;
 
 select E.emp_no, E.first_name, E.last_name, T.title 
 from employees E
 inner join titles T 
 on T.emp_no = E.emp_no where T.to_date = '9999-01-01';
 
 -- 4번 현재 재직 중인 직원 정보를 출력
 -- 직원 기본 정보 모두, title,, salary
 select E.emp_no, E.birth_date, E.first_name, E.last_name, E.gender, E.hire_date, S.salary, T.title
 from employees E
 inner join titles T
 ON T.emp_no = E.emp_no
 inner join salaries S
 on S.emp_no = T.emp_no
where t.to_date = '9999-01-01' and S.to_date = '9999-01-01';

-- 5번 현재 재직 중인 직원의 정보를 출력하세요.
-- ○ 출력항목:  emp_no, first_name, last_name, department
-- ○ 정렬: emp_no 오름 차순
select E.emp_no, E.first_name, E.last_name, D.dept_name
from employees E
INNER JOIN dept_emp DE ON E.emp_no = DE.emp_no
INNER JOIN departments D ON DE.dept_no = D.dept_no
WHERE DE.to_date = '9999-01-01'
ORDER BY E.emp_no;


-- 6번 부서별 재직중인 직원의 수를 출력하세요.
-- ○ 출력항목: 부서번호, 부서명, 인원수
-- ○ 정렬: 부서번호오름차순
select D.dept_no, D.dept_name, count(*)
from departments D
inner join dept_manager DE
on DE.dept_no = D.dept_no
where DE.dept_no = '9999-01-01';

select D.dept_no, D.dept_name, count(*)
from departments D
inner join dept_emp DE
on DE.dept_no = D.dept_no
inner join employees E
on E.emp_no = DE.emp_no
where DE.to_date = '9999-01-01'
group by d.dept_no
order by d.dept_no;

-- 7번 직원번호가 10209인 직원의 부서 이동 히스토리를 출력하세요.
-- ○ 출력항목: emp_no, first_name, last_name, dept_name, from_date, to_date
select E.emp_no, E.first_name, E.last_name, D.dept_name, DE.from_date, DE.to_date
from employees E
inner join dept_emp DE
on E.emp_no = DE.emp_no
inner join departments D
on D.dept_no = DE.dept_no
where E.emp_no = '10209'
order by E.emp_no, de.from_date;
